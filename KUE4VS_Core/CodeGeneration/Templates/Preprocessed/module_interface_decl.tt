<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/**
* The public interface to the <#= module_name #> module.
*/
class <#= interface_name #>: public IModuleInterface
{
public:
	/**
	* Singleton-like access to this module's interface. This is just for convenience!
	* Beware of calling this during the shutdown phase, though. Your module might have been unloaded already.
	*
	* @return Returns singleton instance, loading the module on demand if needed
	*/
	static inline <#= interface_name #>& Get()
	{
		return FModuleManager::LoadModuleChecked< <#= interface_name #> >("<#= module_name #>");
	}

	/**
	* Checks to see if this module is loaded and ready.
	*
	* @return True if the module is loaded and ready to use
	*/
	static inline bool IsAvailable()
	{
		return FModuleManager::Get().IsModuleLoaded("<#= module_name #>");
	}

	/*
	<#= module_name #> module public interface methods.
	*/

};
